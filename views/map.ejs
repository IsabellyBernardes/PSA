<!DOCTYPE html>
<html lang="pt-br">
<head>
    <title>Mapa para Análise de Imóvel</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="/static/map.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/shapefile@0.6.6/dist/shapefile.min.js"></script>
</head>
<body>
    <div class="navbar">
        <div class="navbar-container">
            <div class="logo">
                <img src="/static/LogoPSAPE.png" alt="Logo" class="logo-image">
                <span class="logo-text">Análise de Imóveis</span>
            </div>
        </div>
    </div>

    <header>
        <h1>Mapa para Análise de Imóvel</h1>
    </header>

    <div id="map-container">
        <div id="info-box">
            <h3>Informações da Propriedade</h3>
            <% if (typeof carData !== 'undefined' && carData.length > 0) { %>
                <p><strong>CAR:</strong> <span id="CAR"><%= carData[0].car_number %></span></p>
                <p><strong>Estado:</strong> <span id="estado"></span></p>
                <p><strong>Município:</strong> <span id="municipio"></span></p>
                <p><strong>Outras informações:</strong> <span id="outras-informacoes"></span></p>
            <% } else { %>
                <p>Nenhum dado do CAR disponível.</p>
            <% } %>
        </div>
        
        <div id="map"></div>
    </div>

    <button onclick="novaConsulta()">Voltar</button>

    <script>
        var map = L.map('map').setView([-14.2350, -51.9253], 4);  // Inicializa o mapa com visão do Brasil

        // Adiciona a camada de mapa (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Função para carregar o shapefile da área do imóvel (do CAR)
       // Função para carregar o shapefile do 'Area_do_Imovel'
    
       const shapefilePath = '<%= shapefilePath %>';
    console.log('Caminho do shapefile no frontend:', shapefilePath);
    loadShapefile(shapefilePath);

  


// Função para carregar o shapefile
async function loadShapefile(filePath, layerStyle) {
    try {
        console.log('Tentando carregar o arquivo:', filePath);

        if (filePath.endsWith('.geojson')) {
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
            }

            const geojson = await response.json();
            console.log('GeoJSON carregado:', geojson);

            if (geojson.features && geojson.features.length > 0) {
                const geoJsonLayer = L.geoJson(geojson, { style: layerStyle }).addTo(map);
                map.fitBounds(geoJsonLayer.getBounds());
            } else {
                console.error('Nenhuma feição encontrada no GeoJSON.');
            }
        } else {
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
            }

            const buffer = await response.arrayBuffer();
            const geojson = await shapefile.read(buffer);
            console.log('GeoJSON gerado a partir do shapefile:', geojson);

            if (geojson.features && geojson.features.length > 0) {
                const geoJsonLayer = L.geoJson(geojson, { style: layerStyle }).addTo(map);
                map.fitBounds(geoJsonLayer.getBounds());
            } else {
                console.error('Nenhuma feição encontrada no shapefile.');
            }
        }
    } catch (error) {
        console.error('Erro ao carregar o arquivo:', error);
    }
}

// Função para carregar a camada de estados
async function loadStateLayer() {
    const stateFilePath = '/static/BR_UF_2023/BR_UF_2023.geojson';
    const stateLayerStyle = {
        fillColor: '#007bff',
        color: '#007bff',  // Cor da borda
        weight: 2,
        fillOpacity: 0.5
    };
    await loadShapefile(stateFilePath, stateLayerStyle);
}

// Função para carregar a camada do imóvel
async function loadCarAreaLayer() {
    const carFilePath = '/uploads/PE-2607208-AC496DB43C43418B86901B079BD89BF4/Area_do_Imovel/Area_do_Imovel.geojson';
    const carLayerStyle = {
        fillColor: '#ff7800',
        color: '#ff7800',  // Cor da borda
        weight: 2,
        fillOpacity: 0.5
    };
    await loadShapefile(carFilePath, carLayerStyle);
}

// Carregar ambas as camadas juntas
async function loadLayers() {
    await loadStateLayer();
    await loadCarAreaLayer();
}

// Inicializa o carregamento das camadas
loadLayers();

// Função chamada ao carregar o mapa para inserir a camada inicial de estados
async function loadStateShapefile(directory) {
    const stateFile = "/static/BR_UF_2023/BR_UF_2023.shp";
    console.log('Carregando arquivo do Estado:', stateFile);  // LOG 1

    try {
        const stateBuffer = await fetch(stateFile);
        if (!stateBuffer.ok) {
            throw new Error(`Erro HTTP: ${stateBuffer.status} - ${stateBuffer.statusText}`);
        }

        console.log('Arquivo do Estado encontrado! Convertendo para buffer...');  // LOG 2
        const buffer = await stateBuffer.arrayBuffer();
        console.log('Buffer do Estado recebido:', buffer.byteLength, 'bytes');  // LOG 3

        const geojson = await shapefile.read(buffer);
        console.log('GeoJSON do Estado gerado:', geojson);  // LOG 4

        if (geojson.features && geojson.features.length > 0) {
            console.log('Adicionando camada dos estados ao mapa!');  // LOG 5
            const geoJsonLayer = L.geoJson(geojson, {
                style: { fillColor: '#007bff', weight: 2, fillOpacity: 0.5 }
            }).addTo(map);
            map.fitBounds(geoJsonLayer.getBounds());
        } else {
            console.error('Nenhuma feição encontrada no shapefile dos Estados.');
        }
    } catch (error) {
        console.error('Erro ao carregar o shapefile dos Estados:', error);
    }
}




// Função para carregar o shapefile dos municípios
async function loadMunicipalityShapefile(directory, estado) {
    const municipalityFile = `BR_Municipios_2023/${estado}.shp`;  // Caminho para o shapefile de municípios
    console.log('Carregando arquivo dos Municípios:', municipalityFile);

    try {
        const municipalityBuffer = await fetch(`${directory}/${municipalityFile}`).then(response => response.arrayBuffer());
        const geojson = await shapefile.read(municipalityBuffer);

        if (geojson.features && geojson.features.length > 0) {
            const geoJsonLayer = L.geoJson(geojson, {
                style: { fillColor: '#ff7800', weight: 2, fillOpacity: 0.7 }
            }).addTo(map);
            map.fitBounds(geoJsonLayer.getBounds());

            geoJsonLayer.on('click', function (e) {
                var municipio = e.layer.feature.properties.nome;
                document.getElementById('municipio').innerText = municipio;
            });
        } else {
            console.error('Nenhuma feição encontrada no shapefile dos Municípios.');
        }
    } catch (error) {
        console.error('Erro ao carregar o shapefile dos Municípios:', error);
    }
}


        // Carrega o shapefile da área do imóvel (CAR) ao acessar a página
        var extractPath = "/uploads";  // Caminho para a pasta onde os shapefiles estão armazenados
        var carFilePath = "<%= carData[0].car_number %>";  // Passar o CAR número do backend (ajuste conforme necessário)


        // Carrega os Estados inicialmente (se necessário)
        // loadStateShapefile(extractPath);

        // Função para nova consulta
        function novaConsulta() {
            fetch('/avaliador-perfil')
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/avaliador-perfil';
                    } else {
                        console.error('Erro ao realizar nova consulta.');
                    }
                })
                .catch(error => {
                    console.error('Erro ao realizar nova consulta:', error);
                });
        }
    </script>
    
    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 Projeto PSA. Todos os direitos reservados.</p>
            <p>Desenvolvido por <a href="#">Isabelly Bernardes</a></p>
        </div>
    </footer>
</body>
</html>
