<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Mapa para An√°lise de Im√≥vel</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="/static/map.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/shapefile@0.6.6/dist/shapefile.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js"></script>
</head>
<body>
    <div class="navbar">
        <div class="navbar-container">
            <div class="logo">
                <img src="/static/LogoPSAPE.png" alt="Logo" class="logo-image">
                <span class="logo-text">An√°lise de Im√≥veis</span>
            </div>
        </div>
    </div>

    <header>
        <h1>Mapa para An√°lise de Im√≥vel</h1>
    </header>

    <div id="map-container">
        <div id="info-box">
            <h3>Informa√ß√µes da Propriedade</h3>
            <% if (typeof carData !== 'undefined' && carData.length > 0) { %>
                <p><strong>CAR:</strong> <span id="CAR"><%= carData[0].car_number %></span></p>
                <p><strong>Estado:</strong> <span id="estado">Carregando...</span></p>
                <p><strong>Munic√≠pio:</strong> <span id="municipio">Carregando...</span></p>
                <p><strong>Bioma:</strong> <span id="bioma">Carregando...</span></p>
                <p><strong>Tipo do solo:</strong> <span id="solo">Carregando...</span></p>
                <p><strong>Bacia hidrogr√°fica:</strong> <span id="bacia_hidro">Carregando...</span></p>
                <p><strong>N√≠vel de import√¢ncia biol√≥gica:</strong> <span id="import_bio">Carregando...</span></p>
                <!--<p><strong>Sugest√£o de a√ß√£o:</strong> <span id="acao_principal">Carregando...</span></p>-->
                <!--<p><strong>Outras informa√ß√µes:</strong> <span id="outras-informacoes"></span></p>-->
            <% } else { %>
                <p>Nenhum dado do CAR dispon√≠vel.</p>
            <% } %>
        </div>
        
        
        <div id="map"></div>
    </div>

    <button onclick="novaConsulta()">Voltar</button>

    <script>
        var map = L.map('map').setView([-14.2350, -51.9253], 4);  // Inicializa o mapa com vis√£o do Brasil

        // Adiciona a camada de mapa (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Fun√ß√£o para carregar o shapefile da √°rea do im√≥vel (do CAR)
       // Fun√ß√£o para carregar o shapefile do 'Area_do_Imovel'
    
       const shapefilePath = '<%= shapefilePath %>';
    console.log('Caminho do shapefile no frontend:', shapefilePath);
    loadShapefile(shapefilePath);
    

  

    // Fun√ß√£o para carregar o shapefile
    async function loadShapefile(filePath, layerStyle) {
    try {
        console.log('Tentando carregar o arquivo:', filePath);

        if (filePath.endsWith('.geojson')) {
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
            }

            const geojson = await response.json();
            console.log('GeoJSON carregado:', geojson);

            if (geojson.features && geojson.features.length > 0) {
                const geoJsonLayer = L.geoJson(geojson, {
                    style: layerStyle,
                    onEachFeature: function (feature, layer) {
                        // Extrair informa√ß√µes de estado e munic√≠pio
                        if (feature.properties) {
                            const estado = feature.properties.estado || feature.properties.State || "Estado desconhecido";
                            const municipio = feature.properties.municipio || feature.properties.City || "Munic√≠pio desconhecido";
                            document.getElementById('estado').innerText = estado;
                            document.getElementById('municipio').innerText = municipio;
                        }
                    }
                }).addTo(map);
                
            } else {
                console.error('Nenhuma fei√ß√£o encontrada no GeoJSON.');
            }
        } else {
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
            }

            const buffer = await response.arrayBuffer();
            const geojson = await shapefile.read(buffer);
            console.log('GeoJSON gerado a partir do shapefile:', geojson);

            if (geojson.features && geojson.features.length > 0) {
                const geoJsonLayer = L.geoJson(geojson, {
                    style: layerStyle,
                    onEachFeature: function (feature, layer) {
                        // Extrair informa√ß√µes de estado e munic√≠pio
                        if (feature.properties) {
                            const estado = feature.properties.estado || feature.properties.State || "Estado desconhecido";
                            const municipio = feature.properties.municipio || feature.properties.City || "Munic√≠pio desconhecido";
                            document.getElementById('estado').innerText = estado;
                            document.getElementById('municipio').innerText = municipio;
                            console.log(`üìå Atualizando estado para: ${estado}`);
                            console.log(`üìå Atualizando munic√≠pio para: ${municipio}`);
                        }
                    }
                }).addTo(map);
                
            } else {
                console.error('Nenhuma fei√ß√£o encontrada no shapefile.');
            }
        }
    } catch (error) {
        console.error('Erro ao carregar o arquivo:', error);
    }
}


loadShapefile(shapefilePath);



async function loadGeoJSON(url) {
    const response = await fetch(url);
    return await response.json();
}

function findIntersection(carGeoJSON, layerGeoJSON, propertyName) {
    const feature = layerGeoJSON.features.find(f => turf.booleanIntersects(carGeoJSON, f));
    return feature ? feature.properties[propertyName] : 'N√£o encontrado';
}

async function loadAndIntersect() {
    try {
        // Carregar o GeoJSON da √°rea do CAR
        const carGeoJSON = await loadGeoJSON('uploads/PE-2607208-AC496DB43C43418B86901B079BD89BF4/Area_do_Imovel/Area_do_Imovel.geojson'); // Substitua pelo caminho correto

        // Carregar os GeoJSONs das camadas
        const biomasGeoJSON = await loadGeoJSON('static/Biomas_IBGE_2019/Biomas_IBGE_2019.geojson'); // Substitua pelo caminho correto
        const solosGeoJSON = await loadGeoJSON('static/Solos_Embrapa_2011/Solos_Embrapa_2011.geojson');
        const baciasGeoJSON = await loadGeoJSON('static/Biomas_IBGE_2019/Biomas_IBGE_2019.geojson'); // Substitua pelo caminho correto
        const importanciaGeoJSON = await loadGeoJSON('static/Areas_prioritarias/AreasPrioritarias.geojson'); // Substitua pelo caminho correto
        //const acaoGeoJSON = await loadGeoJSON('static/Areas_prioritarias/AreasPrioritarias.geojson'); // Substitua pelo caminho correto

        // Encontrar informa√ß√µes
        const bioma = findIntersection(carGeoJSON, biomasGeoJSON, 'Bioma'); // Substitua 'nome' pela propriedade correta
        const solo = findIntersection(carGeoJSON, solosGeoJSON, 'Dominio');
        const baciaHidro = findIntersection(carGeoJSON, baciasGeoJSON, 'Bacia_Hidr'); // Substitua 'nome' pela propriedade correta
        const importanciaBio = findIntersection(carGeoJSON, importanciaGeoJSON, 'Import_bio'); // Substitua 'nivel' pela propriedade correta
        //const acaoPrincipal = findIntersection(carGeoJSON, acaoGeoJSON, 'Acao_Princ'); // Substitua 'sugestao' pela propriedade correta

        // Atualizar a caixa de informa√ß√µes
        document.getElementById('bioma').innerText = bioma;
        document.getElementById('bacia_hidro').innerText = baciaHidro;
        document.getElementById('import_bio').innerText = importanciaBio;
        //document.getElementById('acao_principal').innerText = acaoPrincipal;
        document.getElementById('solo').innerText = solo;

        const carBounds = L.geoJson(carGeoJSON).getBounds();
        map.fitBounds(carBounds);

    } catch (error) {
        console.error('Erro ao carregar ou processar os dados:', error);
    }
}


// Fun√ß√£o para carregar a camada de estados
async function loadStateLayer() {
    const stateFilePath = '/static/BR_UF_2023/BR_UF_2023.geojson';
    const stateLayerStyle = {
        fillColor: '#007bff',
        color: '#007bff',  // Cor da borda
        weight: 2,
        fillOpacity: 0.3
    };
    
    await loadShapefile(stateFilePath, stateLayerStyle);
}

// Fun√ß√£o para carregar a camada de solos
async function loadSoilLayer() {
    const soilFilePath = '/static/Solos_Embrapa_2011/Solos_Embrapa_2011.geojson';
    const soilLayerStyle = {
        fillColor: '#F08080',
        color: '#007bff',  // Cor da borda
        weight: 2,
        fillOpacity: 0.3
    };
    await loadShapefile(soilFilePath, soilLayerStyle);
}


// Fun√ß√£o para carregar a camada de conserva√ß√£o
async function loadPriorityLayer() {
    const priorityFilePath = '/static/Areas_prioritarias/AreasPrioritarias.geojson';
    const priorityLayerStyle = {
        fillColor: '#FF8C00',
        color: '#FF8C00',  // Cor da borda
        weight: 2,
        fillOpacity: 0.6
    };
    await loadShapefile(priorityFilePath, priorityLayerStyle);
}

// Fun√ß√£o para carregar a camada de biomas
async function loadBiomeLayer() {
    const biomeFilePath = '/static/Biomas_IBGE_2019/Biomas_IBGE_2019.geojson';
    const biomeLayerStyle = {
        fillColor: '#66CDAA',
        color: '#66CDAA',  // Cor da borda
        weight: 2,
        fillOpacity: 0.4
    };
    await loadShapefile(biomeFilePath, biomeLayerStyle);
}


// Fun√ß√£o para carregar a camada do im√≥vel
async function loadCarAreaLayer() {
    
    const carFilePath = '/uploads/PE-2613701-E32A97E7369045488FF01F8DDAE61A6F/Area_do_Imovel/Area_do_Imovel.geojson'; // Substitua pelo caminho correto
    const carLayerStyle = {
        fillColor: '#ADD8E6',
        color: '#00008B',  // Cor da borda
        weight: 2,
        fillOpacity: 0.2
        
    };
    await loadShapefile(carFilePath, carLayerStyle);
}

// Carregar ambas as camadas juntas
async function loadLayers() {
    await loadStateLayer();
    await loadSoilLayer();
    await loadBiomeLayer();
    await loadPriorityLayer();
    await loadCarAreaLayer(); // Carrega a √°rea do CAR por √∫ltimo e ajusta o mapa
}
loadAndIntersect();
// Inicializa o carregamento das camadas
loadLayers();

// Fun√ß√£o chamada ao carregar o mapa para inserir a camada inicial de estados
async function loadStateShapefile(directory) {
    const stateFile = "/static/BR_UF_2023/BR_UF_2023.shp";
    console.log('Carregando arquivo do Estado:', stateFile);  // LOG 1

    try {
        const stateBuffer = await fetch(stateFile);
        if (!stateBuffer.ok) {
            throw new Error(`Erro HTTP: ${stateBuffer.status} - ${stateBuffer.statusText}`);
        }

        console.log('Arquivo do Estado encontrado! Convertendo para buffer...');  // LOG 2
        const buffer = await stateBuffer.arrayBuffer();
        console.log('Buffer do Estado recebido:', buffer.byteLength, 'bytes');  // LOG 3

        const geojson = await shapefile.read(buffer);
        console.log('GeoJSON do Estado gerado:', geojson);  // LOG 4

        if (geojson.features && geojson.features.length > 0) {
            console.log('Adicionando camada dos estados ao mapa!');  // LOG 5
            const geoJsonLayer = L.geoJson(geojson, {
                style: { fillColor: '#007bff', weight: 2, fillOpacity: 0.5 }
            }).addTo(map);
            
        } else {
            console.error('Nenhuma fei√ß√£o encontrada no shapefile dos Estados.');
        }
    } catch (error) {
        console.error('Erro ao carregar o shapefile dos Estados:', error);
    }
}




// Fun√ß√£o para carregar o shapefile dos munic√≠pios
async function loadMunicipalityShapefile(directory, estado) {
    const municipalityFile = `BR_Municipios_2023/${estado}.shp`;  // Caminho para o shapefile de munic√≠pios
    console.log('Carregando arquivo dos Munic√≠pios:', municipalityFile);

    try {
        const municipalityBuffer = await fetch(`${directory}/${municipalityFile}`).then(response => response.arrayBuffer());
        const geojson = await shapefile.read(municipalityBuffer);

        if (geojson.features && geojson.features.length > 0) {
            const geoJsonLayer = L.geoJson(geojson, {
                style: { fillColor: '#ff7800', weight: 2, fillOpacity: 0.7 }
            }).addTo(map);
            

            geoJsonLayer.on('click', function (e) {
                var municipio = e.layer.feature.properties.nome;
                document.getElementById('municipio').innerText = municipio;
            });
        } else {
            console.error('Nenhuma fei√ß√£o encontrada no shapefile dos Munic√≠pios.');
        }
    } catch (error) {
        console.error('Erro ao carregar o shapefile dos Munic√≠pios:', error);
    }
}


        // Carrega o shapefile da √°rea do im√≥vel (CAR) ao acessar a p√°gina
        var extractPath = "/uploads";  // Caminho para a pasta onde os shapefiles est√£o armazenados
        var carFilePath = "<%= carData[0].car_number %>";  // Passar o CAR n√∫mero do backend (ajuste conforme necess√°rio)


        // Carrega os Estados inicialmente (se necess√°rio)
        // loadStateShapefile(extractPath);

        // Fun√ß√£o para nova consulta
        function novaConsulta() {
            fetch('/avaliador-perfil')
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/avaliador-perfil';
                    } else {
                        console.error('Erro ao realizar nova consulta.');
                    }
                })
                .catch(error => {
                    console.error('Erro ao realizar nova consulta:', error);
                });
        }
    </script>
    
    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 Projeto PSA. Todos os direitos reservados.</p>
            <p>Desenvolvido por <a href="#">Isabelly Bernardes</a></p>
        </div>
    </footer>
</body>
</html>
